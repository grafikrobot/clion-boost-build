// Copyright Rene Rivera 2015-2016
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

{
    parserClass="org.boost.build.parser.BBParser"

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="BB"
    psiImplClassSuffix="Impl"
    psiPackage="org.boost.build.psi"
    psiImplPackage="org.boost.build.psi.impl"

    elementTypeHolderClass="org.boost.build.psi.BBTypes"
    elementTypeClass="org.boost.build.psi.BBElementType"
    tokenTypeClass="org.boost.build.psi.BBTokenType"
}

bbLangFile ::= item_

private item_ ::= run

run ::= block

// block - zero or more statements

block ::= statement*

// statement - any one of jam's rules

statement ::=
    statement_define |
    statement_scope |
    statement_include |
    statement_return |
    statement_break |
    statement_continue |
    statement_for |
    statement_switch |
    statement_if |
    statement_module |
    statement_class |
    statement_while |
    statement_actions |
    statement_call |
    statement_assign

statement_define ::= LOCAL? RULE ARG ( LPAREN lol RPAREN )? LBRACE block RBRACE
statement_scope ::= LBRACE block RBRACE
statement_include ::= INCLUDE list SEMIC
statement_return ::= RETURN list SEMIC
statement_break ::= BREAK SEMIC
statement_continue ::= CONTINUE SEMIC
statement_for ::= FOR LOCAL? ARG IN list LBRACE block RBRACE
statement_switch ::= SWITCH list LBRACE cases RBRACE
statement_if ::= IF expr LBRACE block RBRACE ( ELSE statement )?
statement_module ::= MODULE list LBRACE block RBRACE
statement_class ::= CLASS lol LBRACE block RBRACE
statement_while ::= WHILE expr LBRACE block RBRACE
statement_actions ::= ACTIONS eflags ARG bindlist? LBRACE STRING RBRACE
statement_call ::=
    ARG lol SEMIC
    | ON val statement
statement_assign ::=
    LOCAL? ARG SEMIC
    | LOCAL? ARG assign list SEMIC
    | ARG ON list assign list SEMIC
    | LOCAL list ( assign list )? SEMIC

// assign - = += ?= or default =

assign ::= EQUALS | PLUS_EQUALS | QUESTION_EQUALS | DEFAULT EQUALS

// expr - an expression for if

expr ::=
    ( LPAREN expr RPAREN |
        BANG expr |
        val IN list |
        val )
    ( compare expr )?

compare ::=
    EQUALS | BANG_EQUALS | LANGLE | LANGLE_EQUALS | RANGLE | RANGLE_EQUALS |
    AMPER | AMPERAMPER | BAR | BARBAR

// cases - action elements inside a 'switch'
// case - a single action element inside a 'switch'
// right-recursive rule so cases can be examined in order.

cases ::= case_clause*

case_clause ::= CASE ARG COLON block

// lol - colon delimited list of lists
// right-recursive rule so that lists can be added in order.

lol	::= list ( COLON list )*

// list - zero or more vals in a LIST

list ::= val*

// val - one ARG or function call

val	::= ARG	| keyword | func

// func - a function call (inside []) returning a value

func ::= LBRACKET ( ARG lol | ON val ARG lol | ON val RETURN list ) RBRACKET

// eflags - zero or more modifiers to 'executes'

eflags ::= eflag*

// eflag - a single modifier to 'executes'

eflag ::=
    UPDATED
    | TOGETHER
    | IGNORE
    | QUIETLY
    | PIECEMEAL
    | EXISTING

// bindlist - list of variable to bind for an action

bindlist ::= BIND ARG+

// keyword - all the keywords for jam

keyword ::=
    ACTIONS |
    BIND |
    BREAK |
    CASE |
    CLASS |
    CONTINUE |
    DEFAULT |
    ELSE |
    EXISTING |
    FOR |
    IF |
    IGNORE |
    IN |
    INCLUDE |
    LOCAL |
    MODULE |
    ON |
    PIECEMEAL |
    QUIETLY |
    RETURN |
    RULE |
    SWITCH |
    TOGETHER |
    UPDATED |
    WHILE
