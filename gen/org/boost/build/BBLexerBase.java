/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

// Copyright Rene Rivera 2015-2016
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

package org.boost.build;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import org.boost.build.psi.BBTypes;
import static org.boost.build.BBParserDefinition.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>BB.flex</tt>
 */
class BBLexerBase implements FlexLexer, BBTypes {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int YYSPACE = 2;
  public static final int ACTIONS_SCAN_DEF = 4;
  public static final int ACTIONS_SCAN_DEF_WS = 6;
  public static final int ACTIONS_SCAN_STRING = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\1\1\3\1\7\1\10\1\3\22\0\1\1\1\11\1\6\1\2\2\0\1\13\1\0\1\21\1\22\1"+
    "\0\1\17\16\0\1\23\1\24\1\14\1\12\1\15\1\20\33\0\1\25\1\5\1\26\3\0\1\30\1\37"+
    "\1\31\1\40\1\42\1\46\1\50\1\56\1\33\1\0\1\43\1\44\1\51\1\35\1\34\1\52\1\53"+
    "\1\41\1\36\1\32\1\45\1\0\1\55\1\47\1\54\1\0\1\27\1\16\1\4\7\0\1\7\242\0\2"+
    "\7\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\1\3\1\2\1\4\2\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\2\2\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\15\2\1\5\1\23"+
    "\1\24\1\25\2\5\1\26\7\24\1\27\1\1\3\0"+
    "\1\30\3\0\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\4\2\1\40\1\41\1\42\12\2\3\0\7\24"+
    "\1\30\1\0\14\2\1\43\2\2\7\24\1\2\1\44"+
    "\7\2\1\45\1\46\3\2\2\24\1\47\4\24\2\2"+
    "\1\50\2\2\1\51\2\2\1\52\1\2\1\53\6\24"+
    "\3\2\1\54\1\2\1\55\1\56\1\24\1\57\4\24"+
    "\1\60\1\2\1\61\1\62\2\24\1\63\1\24\1\64"+
    "\1\65\1\66\1\67\1\24\1\70";

  private static int [] zzUnpackAction() {
    int [] result = new int[185];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\136\0\215\0\274\0\353\0\u011a\0\u0149"+
    "\0\353\0\u0178\0\u01a7\0\u01d6\0\353\0\u0205\0\u0234\0\u0263"+
    "\0\u0292\0\u02c1\0\u02f0\0\353\0\353\0\353\0\353\0\353"+
    "\0\353\0\353\0\u031f\0\u034e\0\u037d\0\u03ac\0\u03db\0\u040a"+
    "\0\u0439\0\u0468\0\u0497\0\u04c6\0\u04f5\0\u0524\0\u0553\0\u0582"+
    "\0\u05b1\0\u05e0\0\u05e0\0\u060f\0\u063e\0\u05e0\0\u066d\0\u069c"+
    "\0\u06cb\0\u06fa\0\u0729\0\u0758\0\u0787\0\u07b6\0\u07e5\0\u0178"+
    "\0\u01a7\0\u0814\0\u0582\0\u0843\0\u0872\0\u08a1\0\353\0\353"+
    "\0\353\0\353\0\353\0\353\0\353\0\u08d0\0\u08ff\0\u092e"+
    "\0\u095d\0\u098c\0\353\0\353\0\u09bb\0\u09ea\0\u0a19\0\u0a48"+
    "\0\u0a77\0\u0aa6\0\u0ad5\0\u0b04\0\u0b33\0\u0b62\0\u060f\0\u063e"+
    "\0\u0b91\0\u0bc0\0\u0bef\0\u0c1e\0\u0c4d\0\u0c7c\0\u0cab\0\u0cda"+
    "\0\u01a7\0\u0d09\0\u0d38\0\u0d67\0\u0d96\0\u0dc5\0\u0df4\0\u0e23"+
    "\0\u0e52\0\u0e81\0\u0eb0\0\u0edf\0\u0f0e\0\u0f3d\0\353\0\u0f6c"+
    "\0\u0f9b\0\u0fca\0\u0ff9\0\u1028\0\u1057\0\u1086\0\u10b5\0\u10e4"+
    "\0\u1113\0\353\0\u1142\0\u1171\0\u11a0\0\u11cf\0\u11fe\0\u122d"+
    "\0\u125c\0\353\0\353\0\u128b\0\u12ba\0\u12e9\0\u1318\0\u1347"+
    "\0\u05e0\0\u1376\0\u13a5\0\u13d4\0\u1403\0\u1432\0\u1461\0\353"+
    "\0\u1490\0\u14bf\0\353\0\u14ee\0\u151d\0\353\0\u154c\0\353"+
    "\0\u157b\0\u15aa\0\u15d9\0\u1608\0\u1637\0\u1666\0\u1695\0\u16c4"+
    "\0\u16f3\0\353\0\u1722\0\353\0\353\0\u1751\0\u05e0\0\u1780"+
    "\0\u17af\0\u17de\0\u180d\0\353\0\u183c\0\353\0\353\0\u186b"+
    "\0\u189a\0\u05e0\0\u18c9\0\u05e0\0\353\0\u05e0\0\u05e0\0\u18f8"+
    "\0\u05e0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[185];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\1\10\1\7\1\11\1\12\1\13\1\6"+
    "\1\7\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\6\1\35\1\36\1\6\1\37\1\40"+
    "\1\41\1\42\1\43\1\6\1\44\1\6\1\45\2\6"+
    "\1\46\3\6\1\47\1\6\1\50\1\51\1\50\1\51"+
    "\3\50\1\0\1\51\46\50\1\52\1\50\1\52\1\0"+
    "\1\53\1\54\1\55\1\52\1\0\16\52\1\56\2\52"+
    "\1\57\1\60\3\52\1\61\2\52\1\62\2\52\1\63"+
    "\4\52\1\64\1\65\3\52\1\50\1\66\1\50\1\66"+
    "\3\50\1\0\1\66\46\50\4\67\1\50\52\67\1\6"+
    "\1\0\1\6\1\0\1\6\1\70\1\71\1\6\1\0"+
    "\46\6\1\0\1\7\1\0\1\7\4\0\1\7\46\0"+
    "\1\10\1\72\1\10\1\73\1\10\1\74\1\75\1\10"+
    "\1\72\46\10\3\6\1\0\3\6\2\0\46\6\5\71"+
    "\1\76\1\6\50\71\1\6\1\0\1\6\1\0\1\6"+
    "\1\70\1\71\1\6\1\0\1\6\1\77\45\6\1\0"+
    "\1\6\1\0\1\6\1\70\1\71\1\6\1\0\2\6"+
    "\1\100\44\6\1\0\1\6\1\0\1\6\1\70\1\71"+
    "\1\6\1\0\1\6\1\101\45\6\1\0\1\6\1\0"+
    "\1\6\1\70\1\71\1\6\1\0\1\6\1\102\45\6"+
    "\1\0\1\6\1\0\1\6\1\70\1\71\1\6\1\0"+
    "\5\6\1\103\41\6\1\0\1\6\1\0\1\6\1\70"+
    "\1\71\1\6\1\0\1\6\1\104\45\6\1\0\1\6"+
    "\1\0\1\6\1\70\1\71\1\6\1\0\1\6\1\105"+
    "\45\6\1\0\1\6\1\0\1\6\1\70\1\71\1\6"+
    "\1\0\20\6\1\106\26\6\1\0\1\6\1\0\1\6"+
    "\1\70\1\71\1\6\1\0\17\6\1\107\3\6\1\110"+
    "\7\6\1\111\13\6\1\0\1\6\1\0\1\6\1\70"+
    "\1\71\1\6\1\0\24\6\1\112\10\6\1\113\11\6"+
    "\1\0\1\6\1\0\1\6\1\70\1\71\1\6\1\0"+
    "\24\6\1\114\22\6\1\0\1\6\1\0\1\6\1\70"+
    "\1\71\1\6\1\0\44\6\1\115\2\6\1\0\1\6"+
    "\1\0\1\6\1\70\1\71\1\6\1\0\30\6\1\116"+
    "\16\6\1\0\1\6\1\0\1\6\1\70\1\71\1\6"+
    "\1\0\31\6\1\117\15\6\1\0\1\6\1\0\1\6"+
    "\1\70\1\71\1\6\1\0\31\6\1\120\2\6\1\121"+
    "\12\6\1\0\1\6\1\0\1\6\1\70\1\71\1\6"+
    "\1\0\33\6\1\122\13\6\1\0\1\6\1\0\1\6"+
    "\1\70\1\71\1\6\1\0\23\6\1\123\23\6\1\0"+
    "\1\6\1\0\1\6\1\70\1\71\1\6\1\0\23\6"+
    "\1\124\23\6\1\0\1\6\1\0\1\6\1\70\1\71"+
    "\1\6\1\0\23\6\1\125\23\6\1\0\1\6\1\0"+
    "\1\6\1\70\1\71\1\6\1\0\45\6\1\126\60\0"+
    "\1\51\1\0\1\51\4\0\1\51\46\0\1\52\1\0"+
    "\1\52\1\0\1\52\1\127\1\130\1\52\1\0\51\52"+
    "\1\0\3\52\2\0\46\52\5\130\1\131\1\52\50\130"+
    "\1\52\1\0\1\52\1\0\1\52\1\127\1\130\1\52"+
    "\1\0\23\52\1\132\23\52\1\0\1\52\1\0\1\52"+
    "\1\127\1\130\1\52\1\0\37\52\1\133\7\52\1\0"+
    "\1\52\1\0\1\52\1\127\1\130\1\52\1\0\22\52"+
    "\1\134\24\52\1\0\1\52\1\0\1\52\1\127\1\130"+
    "\1\52\1\0\36\52\1\135\10\52\1\0\1\52\1\0"+
    "\1\52\1\127\1\130\1\52\1\0\41\52\1\136\5\52"+
    "\1\0\1\52\1\0\1\52\1\127\1\130\1\52\1\0"+
    "\22\52\1\137\24\52\1\0\1\52\1\0\1\52\1\127"+
    "\1\130\1\52\1\0\34\52\1\140\11\52\1\0\1\66"+
    "\1\0\1\66\4\0\1\66\46\0\4\67\1\0\52\67"+
    "\3\72\1\73\53\72\3\10\1\73\3\10\2\72\46\10"+
    "\3\75\1\141\1\75\1\142\1\10\50\75\3\71\1\0"+
    "\3\71\2\0\46\71\1\6\1\0\1\6\1\0\1\6"+
    "\1\70\1\71\1\6\1\0\21\6\1\143\25\6\1\0"+
    "\1\6\1\0\1\6\1\70\1\71\1\6\1\0\25\6"+
    "\1\144\21\6\1\0\1\6\1\0\1\6\1\70\1\71"+
    "\1\6\1\0\24\6\1\145\22\6\1\0\1\6\1\0"+
    "\1\6\1\70\1\71\1\6\1\0\17\6\1\146\27\6"+
    "\1\0\1\6\1\0\1\6\1\70\1\71\1\6\1\0"+
    "\20\6\1\147\26\6\1\0\1\6\1\0\1\6\1\70"+
    "\1\71\1\6\1\0\22\6\1\150\24\6\1\0\1\6"+
    "\1\0\1\6\1\70\1\71\1\6\1\0\31\6\1\151"+
    "\15\6\1\0\1\6\1\0\1\6\1\70\1\71\1\6"+
    "\1\0\35\6\1\152\11\6\1\0\1\6\1\0\1\6"+
    "\1\70\1\71\1\6\1\0\21\6\1\153\25\6\1\0"+
    "\1\6\1\0\1\6\1\70\1\71\1\6\1\0\33\6"+
    "\1\154\13\6\1\0\1\6\1\0\1\6\1\70\1\71"+
    "\1\6\1\0\25\6\1\155\21\6\1\0\1\6\1\0"+
    "\1\6\1\70\1\71\1\6\1\0\20\6\1\156\26\6"+
    "\1\0\1\6\1\0\1\6\1\70\1\71\1\6\1\0"+
    "\30\6\1\157\16\6\1\0\1\6\1\0\1\6\1\70"+
    "\1\71\1\6\1\0\27\6\1\160\17\6\1\0\1\6"+
    "\1\0\1\6\1\70\1\71\1\6\1\0\22\6\1\161"+
    "\23\6\3\130\1\0\3\130\2\0\46\130\1\52\1\0"+
    "\1\52\1\0\1\52\1\127\1\130\1\52\1\0\37\52"+
    "\1\162\7\52\1\0\1\52\1\0\1\52\1\127\1\130"+
    "\1\52\1\0\24\52\1\163\22\52\1\0\1\52\1\0"+
    "\1\52\1\127\1\130\1\52\1\0\24\52\1\164\22\52"+
    "\1\0\1\52\1\0\1\52\1\127\1\130\1\52\1\0"+
    "\22\52\1\165\24\52\1\0\1\52\1\0\1\52\1\127"+
    "\1\130\1\52\1\0\27\52\1\166\17\52\1\0\1\52"+
    "\1\0\1\52\1\127\1\130\1\52\1\0\31\52\1\167"+
    "\15\52\1\0\1\52\1\0\1\52\1\127\1\130\1\52"+
    "\1\0\22\52\1\170\23\52\3\75\1\73\3\75\2\72"+
    "\46\75\1\6\1\0\1\6\1\0\1\6\1\70\1\71"+
    "\1\6\1\0\22\6\1\171\24\6\1\0\1\6\1\0"+
    "\1\6\1\70\1\71\1\6\1\0\31\6\1\172\15\6"+
    "\1\0\1\6\1\0\1\6\1\70\1\71\1\6\1\0"+
    "\21\6\1\173\25\6\1\0\1\6\1\0\1\6\1\70"+
    "\1\71\1\6\1\0\25\6\1\174\21\6\1\0\1\6"+
    "\1\0\1\6\1\70\1\71\1\6\1\0\33\6\1\175"+
    "\13\6\1\0\1\6\1\0\1\6\1\70\1\71\1\6"+
    "\1\0\21\6\1\176\25\6\1\0\1\6\1\0\1\6"+
    "\1\70\1\71\1\6\1\0\17\6\1\177\27\6\1\0"+
    "\1\6\1\0\1\6\1\70\1\71\1\6\1\0\17\6"+
    "\1\200\27\6\1\0\1\6\1\0\1\6\1\70\1\71"+
    "\1\6\1\0\34\6\1\201\12\6\1\0\1\6\1\0"+
    "\1\6\1\70\1\71\1\6\1\0\31\6\1\202\15\6"+
    "\1\0\1\6\1\0\1\6\1\70\1\71\1\6\1\0"+
    "\31\6\1\203\15\6\1\0\1\6\1\0\1\6\1\70"+
    "\1\71\1\6\1\0\17\6\1\204\27\6\1\0\1\6"+
    "\1\0\1\6\1\70\1\71\1\6\1\0\34\6\1\205"+
    "\12\6\1\0\1\6\1\0\1\6\1\70\1\71\1\6"+
    "\1\0\33\6\1\206\12\6\1\52\1\0\1\52\1\0"+
    "\1\52\1\127\1\130\1\52\1\0\31\52\1\207\15\52"+
    "\1\0\1\52\1\0\1\52\1\127\1\130\1\52\1\0"+
    "\23\52\1\210\23\52\1\0\1\52\1\0\1\52\1\127"+
    "\1\130\1\52\1\0\27\52\1\211\17\52\1\0\1\52"+
    "\1\0\1\52\1\127\1\130\1\52\1\0\25\52\1\212"+
    "\21\52\1\0\1\52\1\0\1\52\1\127\1\130\1\52"+
    "\1\0\17\52\1\213\27\52\1\0\1\52\1\0\1\52"+
    "\1\127\1\130\1\52\1\0\20\52\1\214\26\52\1\0"+
    "\1\52\1\0\1\52\1\127\1\130\1\52\1\0\31\52"+
    "\1\215\14\52\1\6\1\0\1\6\1\0\1\6\1\70"+
    "\1\71\1\6\1\0\23\6\1\216\23\6\1\0\1\6"+
    "\1\0\1\6\1\70\1\71\1\6\1\0\22\6\1\217"+
    "\24\6\1\0\1\6\1\0\1\6\1\70\1\71\1\6"+
    "\1\0\25\6\1\220\21\6\1\0\1\6\1\0\1\6"+
    "\1\70\1\71\1\6\1\0\34\6\1\221\12\6\1\0"+
    "\1\6\1\0\1\6\1\70\1\71\1\6\1\0\20\6"+
    "\1\222\26\6\1\0\1\6\1\0\1\6\1\70\1\71"+
    "\1\6\1\0\32\6\1\223\14\6\1\0\1\6\1\0"+
    "\1\6\1\70\1\71\1\6\1\0\34\6\1\224\12\6"+
    "\1\0\1\6\1\0\1\6\1\70\1\71\1\6\1\0"+
    "\30\6\1\225\16\6\1\0\1\6\1\0\1\6\1\70"+
    "\1\71\1\6\1\0\33\6\1\226\13\6\1\0\1\6"+
    "\1\0\1\6\1\70\1\71\1\6\1\0\33\6\1\227"+
    "\13\6\1\0\1\6\1\0\1\6\1\70\1\71\1\6"+
    "\1\0\31\6\1\230\14\6\1\52\1\0\1\52\1\0"+
    "\1\52\1\127\1\130\1\52\1\0\21\52\1\231\25\52"+
    "\1\0\1\52\1\0\1\52\1\127\1\130\1\52\1\0"+
    "\30\52\1\232\16\52\1\0\1\52\1\0\1\52\1\127"+
    "\1\130\1\52\1\0\21\52\1\233\25\52\1\0\1\52"+
    "\1\0\1\52\1\127\1\130\1\52\1\0\21\52\1\234"+
    "\25\52\1\0\1\52\1\0\1\52\1\127\1\130\1\52"+
    "\1\0\31\52\1\235\15\52\1\0\1\52\1\0\1\52"+
    "\1\127\1\130\1\52\1\0\21\52\1\236\24\52\1\6"+
    "\1\0\1\6\1\0\1\6\1\70\1\71\1\6\1\0"+
    "\24\6\1\237\22\6\1\0\1\6\1\0\1\6\1\70"+
    "\1\71\1\6\1\0\24\6\1\240\22\6\1\0\1\6"+
    "\1\0\1\6\1\70\1\71\1\6\1\0\27\6\1\241"+
    "\17\6\1\0\1\6\1\0\1\6\1\70\1\71\1\6"+
    "\1\0\45\6\1\242\1\6\1\0\1\6\1\0\1\6"+
    "\1\70\1\71\1\6\1\0\33\6\1\243\13\6\1\0"+
    "\1\6\1\0\1\6\1\70\1\71\1\6\1\0\24\6"+
    "\1\244\22\6\1\0\1\6\1\0\1\6\1\70\1\71"+
    "\1\6\1\0\31\6\1\245\14\6\1\52\1\0\1\52"+
    "\1\0\1\52\1\127\1\130\1\52\1\0\45\52\1\246"+
    "\1\52\1\0\1\52\1\0\1\52\1\127\1\130\1\52"+
    "\1\0\31\52\1\247\15\52\1\0\1\52\1\0\1\52"+
    "\1\127\1\130\1\52\1\0\22\52\1\250\24\52\1\0"+
    "\1\52\1\0\1\52\1\127\1\130\1\52\1\0\31\52"+
    "\1\251\15\52\1\0\1\52\1\0\1\52\1\127\1\130"+
    "\1\52\1\0\40\52\1\252\6\52\1\0\1\52\1\0"+
    "\1\52\1\127\1\130\1\52\1\0\33\52\1\253\12\52"+
    "\1\6\1\0\1\6\1\0\1\6\1\70\1\71\1\6"+
    "\1\0\25\6\1\254\21\6\1\0\1\6\1\0\1\6"+
    "\1\70\1\71\1\6\1\0\34\6\1\255\12\6\1\0"+
    "\1\6\1\0\1\6\1\70\1\71\1\6\1\0\31\6"+
    "\1\256\15\6\1\0\1\6\1\0\1\6\1\70\1\71"+
    "\1\6\1\0\21\6\1\257\24\6\1\52\1\0\1\52"+
    "\1\0\1\52\1\127\1\130\1\52\1\0\31\52\1\260"+
    "\15\52\1\0\1\52\1\0\1\52\1\127\1\130\1\52"+
    "\1\0\24\52\1\261\22\52\1\0\1\52\1\0\1\52"+
    "\1\127\1\130\1\52\1\0\27\52\1\262\17\52\1\0"+
    "\1\52\1\0\1\52\1\127\1\130\1\52\1\0\31\52"+
    "\1\263\15\52\1\0\1\52\1\0\1\52\1\127\1\130"+
    "\1\52\1\0\43\52\1\264\2\52\1\6\1\0\1\6"+
    "\1\0\1\6\1\70\1\71\1\6\1\0\31\6\1\265"+
    "\14\6\1\52\1\0\1\52\1\0\1\52\1\127\1\130"+
    "\1\52\1\0\30\52\1\266\16\52\1\0\1\52\1\0"+
    "\1\52\1\127\1\130\1\52\1\0\37\52\1\267\7\52"+
    "\1\0\1\52\1\0\1\52\1\127\1\130\1\52\1\0"+
    "\17\52\1\270\27\52\1\0\1\52\1\0\1\52\1\127"+
    "\1\130\1\52\1\0\33\52\1\271\12\52";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6439];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\43\1\1\11\17\1\3\0\1\11\3\0\30\1"+
    "\3\0\10\1\1\0\127\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[185];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public BBLexerBase() {
    this((java.io.Reader)null);
 }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  BBLexerBase(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { yybegin(ACTIONS_SCAN_DEF); return STRING;
            }
          case 57: break;
          case 2: 
            { yybegin(YYSPACE); return ARG;
            }
          case 58: break;
          case 3: 
            { return TokenType.WHITE_SPACE;
            }
          case 59: break;
          case 4: 
            { yybegin(YYSPACE); return RBRACE;
            }
          case 60: break;
          case 5: 
            { return TokenType.BAD_CHARACTER;
            }
          case 61: break;
          case 6: 
            { yybegin(YYSPACE); return BANG;
            }
          case 62: break;
          case 7: 
            { yybegin(YYSPACE); return EQUALS;
            }
          case 63: break;
          case 8: 
            { yybegin(YYSPACE); return AMPER;
            }
          case 64: break;
          case 9: 
            { yybegin(YYSPACE); return LANGLE;
            }
          case 65: break;
          case 10: 
            { yybegin(YYSPACE); return RANGLE;
            }
          case 66: break;
          case 11: 
            { yybegin(YYSPACE); return BAR;
            }
          case 67: break;
          case 12: 
            { yybegin(YYSPACE); return LPAREN;
            }
          case 68: break;
          case 13: 
            { yybegin(YYSPACE); return RPAREN;
            }
          case 69: break;
          case 14: 
            { yybegin(YYSPACE); return COLON;
            }
          case 70: break;
          case 15: 
            { yybegin(YYSPACE); return SEMIC;
            }
          case 71: break;
          case 16: 
            { yybegin(YYSPACE); return LBRACKET;
            }
          case 72: break;
          case 17: 
            { yybegin(YYSPACE); return RBRACKET;
            }
          case 73: break;
          case 18: 
            { yybegin(YYSPACE); return LBRACE;
            }
          case 74: break;
          case 19: 
            { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
            }
          case 75: break;
          case 20: 
            { yybegin(ACTIONS_SCAN_DEF_WS); return ARG;
            }
          case 76: break;
          case 21: 
            { yybegin(YYINITIAL); return RBRACE;
            }
          case 77: break;
          case 22: 
            { yybegin(ACTIONS_SCAN_STRING); return LBRACE;
            }
          case 78: break;
          case 23: 
            { yybegin(ACTIONS_SCAN_DEF); return TokenType.WHITE_SPACE;
            }
          case 79: break;
          case 24: 
            { return COMMENT;
            }
          case 80: break;
          case 25: 
            { yybegin(YYSPACE); return BANG_EQUALS;
            }
          case 81: break;
          case 26: 
            { yybegin(YYSPACE); return AMPERAMPER;
            }
          case 82: break;
          case 27: 
            { yybegin(YYSPACE); return LANGLE_EQUALS;
            }
          case 83: break;
          case 28: 
            { yybegin(YYSPACE); return RANGLE_EQUALS;
            }
          case 84: break;
          case 29: 
            { yybegin(YYSPACE); return BARBAR;
            }
          case 85: break;
          case 30: 
            { yybegin(YYSPACE); return PLUS_EQUALS;
            }
          case 86: break;
          case 31: 
            { yybegin(YYSPACE); return QUESTION_EQUALS;
            }
          case 87: break;
          case 32: 
            { yybegin(YYSPACE); return IN;
            }
          case 88: break;
          case 33: 
            { yybegin(YYSPACE); return IF;
            }
          case 89: break;
          case 34: 
            { yybegin(YYSPACE); return ON;
            }
          case 90: break;
          case 35: 
            { yybegin(YYSPACE); return FOR;
            }
          case 91: break;
          case 36: 
            { yybegin(YYSPACE); return CASE;
            }
          case 92: break;
          case 37: 
            { yybegin(YYSPACE); return RULE;
            }
          case 93: break;
          case 38: 
            { yybegin(YYSPACE); return ELSE;
            }
          case 94: break;
          case 39: 
            { yybegin(ACTIONS_SCAN_DEF_WS); return BIND;
            }
          case 95: break;
          case 40: 
            { yybegin(YYSPACE); return CLASS;
            }
          case 96: break;
          case 41: 
            { yybegin(YYSPACE); return BREAK;
            }
          case 97: break;
          case 42: 
            { yybegin(YYSPACE); return LOCAL;
            }
          case 98: break;
          case 43: 
            { yybegin(YYSPACE); return WHILE;
            }
          case 99: break;
          case 44: 
            { yybegin(YYSPACE); return SWITCH;
            }
          case 100: break;
          case 45: 
            { yybegin(YYSPACE); return RETURN;
            }
          case 101: break;
          case 46: 
            { yybegin(YYSPACE); return MODULE;
            }
          case 102: break;
          case 47: 
            { yybegin(ACTIONS_SCAN_DEF_WS); return IGNORE;
            }
          case 103: break;
          case 48: 
            { yybegin(ACTIONS_SCAN_DEF_WS); return ACTIONS;
            }
          case 104: break;
          case 49: 
            { yybegin(YYSPACE); return INCLUDE;
            }
          case 105: break;
          case 50: 
            { yybegin(YYSPACE); return DEFAULT;
            }
          case 106: break;
          case 51: 
            { yybegin(ACTIONS_SCAN_DEF_WS); return UPDATED;
            }
          case 107: break;
          case 52: 
            { yybegin(ACTIONS_SCAN_DEF_WS); return QUIETLY;
            }
          case 108: break;
          case 53: 
            { yybegin(YYSPACE); return CONTINUE;
            }
          case 109: break;
          case 54: 
            { yybegin(ACTIONS_SCAN_DEF_WS); return TOGETHER;
            }
          case 110: break;
          case 55: 
            { yybegin(ACTIONS_SCAN_DEF_WS); return EXISTING;
            }
          case 111: break;
          case 56: 
            { yybegin(ACTIONS_SCAN_DEF_WS); return PIECEMEAL;
            }
          case 112: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
